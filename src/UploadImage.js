import { useState } from "react";
import { db } from "./firebase"; // –ò–º–ø–æ—Ä—Ç Firestore
import { collection, addDoc } from "firebase/firestore";

export default function UploadImage() {
  const [image, setImage] = useState(null);
  const [imageUrl, setImageUrl] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const cloudName = process.env.REACT_APP_CLOUDINARY_CLOUD_NAME;
  const apiKey = process.env.REACT_APP_CLOUDINARY_API_KEY;
  const apiSecret = process.env.REACT_APP_CLOUDINARY_API_SECRET;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã
  if (!cloudName || !apiKey || !apiSecret) {
    console.error("Cloudinary credentials are missing.");
    setError("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Cloudinary. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.");
    return null; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –∑–∞–¥–∞–Ω—ã
  }

  const uploadFile = async () => {
    if (!image) {
      setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.");
      return;
    }

    setLoading(true); // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    setError(""); // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏

    const formData = new FormData();
    formData.append("file", image);
    formData.append("upload_preset", "custom"); // –£–∫–∞–∂–∏—Ç–µ –≤–∞—à preset
    formData.append("cloud_name", cloudName);

    console.log(cloudName, apiKey, apiSecret); // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

    try {
      const response = await fetch(
        `https://api.cloudinary.com/v1_1/${cloudName}/image/upload`,
        {
          method: "POST",
          body: formData,
        }
      );

      const data = await response.json();
      console.log("Cloudinary Response:", data); // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Cloudinary
      if (!response.ok) {
        setError(`–û—à–∏–±–∫–∞ –æ—Ç Cloudinary: ${data.error.message}`);
        console.error("–û—à–∏–±–∫–∞ –æ—Ç Cloudinary:", data.error.message);
        return;
      }

      if (!data.secure_url) {
        setError("–û—à–∏–±–∫–∞: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω.");
        console.error("–û—à–∏–±–∫–∞: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω.");
        return;
      }

      const uploadedImageUrl = data.secure_url;
      setImageUrl(uploadedImageUrl);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ imageUrl –≤–∞–ª–∏–¥–Ω–æ–µ
      if (uploadedImageUrl) {
        try {
          await addDoc(collection(db, "products"), {
            name: "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
            imageUrl: uploadedImageUrl, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π imageUrl
            price: 1000,
          });

          console.log("–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Firestore:", uploadedImageUrl);
        } catch (firestoreError) {
          setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ Firestore: ${firestoreError.message}`);
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ Firestore:", firestoreError);
        }
      } else {
        setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ Cloudinary: URL –Ω–µ –ø–æ–ª—É—á–µ–Ω.");
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Cloudinary:", data);
      }
    } catch (err) {
      setError(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ${err.message}`);
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:", err);
    } finally {
      setLoading(false); // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    }
  };

  return (
    <div>
      <h2>üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</h2>
      <input
        type="file"
        onChange={(e) => setImage(e.target.files[0])}
        accept="image/*" // –î–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      />
      <button onClick={uploadFile} disabled={loading}>
        {loading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–ó–∞–≥—Ä—É–∑–∏—Ç—å"}
      </button>

      {error && <p style={{ color: "red" }}>{error}</p>}
      {imageUrl && <img src={imageUrl} alt="Uploaded" />}
    </div>
  );
}
